///* ========================================================================
//   #CORE
//   ======================================================================== */

// This core file sets up duckycss’ most important setup variables. They
// underpin a lot of how the framework functions and should be modified and
// preconfigured with caution.


// Base typographical styles and baseline grid. You need to define these values
// in pixels: duckycss will convert them to more appropriate units.

$ducky-global-font-size:    16px !default;
$ducky-global-line-height:  24px !default;


// We have all of our heading font sizes defined here. Passing these pixel
// values into our `ducky-font-size()` mixin will generate a rem-based
// `font-size` with a pixel fallback, as well as generating a `line-height` that
// will sit on our baseline grid.

$ducky-font-size-h1:  36px !default;
$ducky-font-size-h2:  28px !default;
$ducky-font-size-h3:  24px !default;
$ducky-font-size-h4:  20px !default;
$ducky-font-size-h5:  18px !default;
$ducky-font-size-h6:  16px !default;





// Spacing values are determined based on your project’s global line height (i.e
// your baseline grid). It is not recommended that you modify these following
// variables (it can break your vertical rhythm), but if you need to, you can.

$ducky-global-spacing-unit: round($ducky-global-line-height) !default;


// How many times larger/smaller than the default should our spacing unit
// variants be?

$ducky-global-spacing-unit-factor-tiny:   0.25 !default;
$ducky-global-spacing-unit-factor-small:  0.5  !default;
$ducky-global-spacing-unit-factor-large:  2    !default;
$ducky-global-spacing-unit-factor-huge:   4    !default;


// Define our object modifier classes
$ducky-modifiers: (
  "tiny"  : 0.25,
  "small" : 0.5,
  "large" : 2,
  "huge"  : 4,
);


// Define the fractions we want to output utility width classes for.
$ducky-fractions: 1 2 3 4 5 !default;


// Define our project's breakpoints
$ducky-breakpoints: (
  'mobile'  : 320px,
  'tablet'  : 740px,
  'desktop' : 980px,
  'wide'    : 1300px
) !default;


// The breakpoints we want to output utility width classes for.
$ducky-breakpoint-has-widths: (
  'mobile',
  'tablet',
  'desktop',
  'wide'
) !default;





////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//                               W A R N I N G                                //
//                                                                            //
//                  DO NOT MODIFY ANYTHING BEYOND THIS POINT                  //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////


// Check that the chosen font rules are pixel numbers.

@each $_ducky-font-globals in
      $ducky-global-font-size
      $ducky-global-line-height {

  @if (type-of($_ducky-font-globals) == number) {

    @if (unit($_ducky-font-globals) != "px") {
      @error "`#{$_ducky-font-globals}` needs to be a pixel value.";
    }

  } @else {
    @error "`#{$_ducky-font-globals}` needs to be a number.";
  }

}


// Check that the chosen size factors are unitless numbers.

@each $_ducky-spacing-unit in
      $ducky-global-spacing-unit-factor-tiny
      $ducky-global-spacing-unit-factor-small
      $ducky-global-spacing-unit-factor-large
      $ducky-global-spacing-unit-factor-huge {

  @if (type-of($_ducky-spacing-unit) == number) {

    @if (unitless($_ducky-spacing-unit) == false) {
      @error "`#{$_ducky-spacing-unit}` needs to be unitless.";
    }

  } @else {
    @error "`#{$_ducky-spacing-unit}` needs to be a number.";
  }

}


// Private/framework-only reassignment. Do not alter anything below.

$ducky-global-spacing-unit-tiny:  round($ducky-global-spacing-unit * $ducky-global-spacing-unit-factor-tiny);
$ducky-global-spacing-unit-small: round($ducky-global-spacing-unit * $ducky-global-spacing-unit-factor-small);
$ducky-global-spacing-unit-large: round($ducky-global-spacing-unit * $ducky-global-spacing-unit-factor-large);
$ducky-global-spacing-unit-huge:  round($ducky-global-spacing-unit * $ducky-global-spacing-unit-factor-huge);
